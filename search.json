[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Latest Posts",
    "section": "",
    "text": "Can you use maching learning to win NCAA Bracket Challenge 2024?\n\n\n\n\n\n\nncaa\n\n\nmachinelearning\n\n\nbasketball\n\n\n\n\n\n\n\n\n\nApr 4, 2024\n\n\nWhitney Schwisow\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nApr 4, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nApr 1, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/can-you-use-machine-learning-to-win-ncaa-bracket-challenge-2024/index.html",
    "href": "posts/can-you-use-machine-learning-to-win-ncaa-bracket-challenge-2024/index.html",
    "title": "Can you use maching learning to win NCAA Bracket Challenge 2024?",
    "section": "",
    "text": "The March Madness tournament challenge looked different this year for me. Typically, I crank out a bracket approximately ten minutes before the first tournament game with my only knowledge of the college basketball season being the two Nebraska games I had watched over the course of the four month season. This year was not much different in terms of my NCAA basketball knowledge, but I had a new tool in my belt for making selections: a predictive model.\nAs I sit here today and reflect on my March Madness tournament bracket predictive model, I can’t help but think about how much I hate being average. Out of the 11 brackets, mine came in 4th place. I was in the 77th percentile, which felt okay until I realized that my model was six millionth place. What feels worse is that my personal bracket was in the 82nd percentile (reminder: I know nothing about NCAA basketball).\nMy one glimmer of hope is that my bracket beat Gunnar’s, hereby proving that I am the smartest actuarial science major in SPMC 460 (#CoJMCFamily).\nThe following is a look inside my thoughts as I built what I thought would be the winning model.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(tidymodels)\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n✔ broom        1.0.5     ✔ rsample      1.2.0\n✔ dials        1.2.0     ✔ tune         1.1.2\n✔ infer        1.0.5     ✔ workflows    1.1.3\n✔ modeldata    1.3.0     ✔ workflowsets 1.0.1\n✔ parsnip      1.1.1     ✔ yardstick    1.3.0\n✔ recipes      1.0.9     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n\n\nCode\nlibrary(hoopR)\nlibrary(zoo)\n\n\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\nCode\nlibrary(bonsai)\nlibrary(gt)\nset.seed(1234)\n\ngames &lt;- load_mbb_team_box(seasons = 2015:2024) |&gt; filter(game_date &lt; as.Date(\"2024-03-18\"))\n\nnond1 &lt;- games |&gt; group_by(team_id, season) |&gt; tally() |&gt; filter(n &lt; 10 & season != 2021) |&gt; select(team_id)\nnond1 &lt;- pull(nond1)\n\ndf &lt;- games |&gt; filter(!team_id %in% nond1 & !opponent_team_id %in% nond1)\n\nteamside &lt;- df |&gt; \n  group_by(team_id, season) |&gt; \n  arrange(game_date) |&gt; \n  mutate(\n    team_possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_season_offensive_efficiency = lag(cummean(team_offensive_efficiency), n=1),\n    team_season_defensive_efficiency = lag(cummean(team_defensive_efficiency), n=1),\n    team_season_freethrowpct = lag(cummean(free_throw_pct), n=1),\n    team_season_total_rebounds = lag(cummean(total_rebounds), n=1),\n    team_season_fgpct = lag(cummean(field_goal_pct), n=1),\n    team_season_3ptrs_attempted = lag(cummean(three_point_field_goals_attempted), n=1),\n    team_season_rollmean_turnovers = rollmean(lag(turnovers, n=1), k=5, align = \"right\", fill=NA),\n    turnovers_per_possession = turnovers/team_possessions,\n    team_turnovers_per_possession = lag(cummean(turnovers_per_possession), n=1),\n    score_margin = team_score - opponent_team_score,\n    absolute_score_margin = abs(score_margin)\n  ) |&gt; \n  filter(absolute_score_margin &lt;= 40) |&gt; \n  ungroup()\n\nopponentside &lt;- teamside |&gt; \n  select(-opponent_team_id) |&gt; \n  rename(\n    opponent_team_id = team_id,\n    opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    opponent_season_defensive_efficiency = team_season_defensive_efficiency,\n    opponent_season_freethrowpct = team_season_freethrowpct,\n    opponent_season_total_rebounds = team_season_total_rebounds,\n    opponent_season_fgpct = team_season_fgpct,\n    opponent_season_3ptrs_attempted = team_season_3ptrs_attempted,\n    opponent_season_rollmean_turnovers = team_season_rollmean_turnovers,\n    opponent_turnovers_per_possession = team_turnovers_per_possession\n  ) |&gt; \n  select(\n    game_id,\n    opponent_team_id,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    opponent_season_freethrowpct,\n    opponent_season_total_rebounds,\n    opponent_season_fgpct,\n    opponent_season_3ptrs_attempted,\n    opponent_season_rollmean_turnovers,\n    opponent_turnovers_per_possession\n  )\n\nbothsides &lt;- teamside |&gt; inner_join(opponentside)\n\n\nJoining with `by = join_by(game_id, opponent_team_id)`\n\n\nCode\nbothsides &lt;- bothsides |&gt; mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_team_score ~ \"W\",\n    opponent_team_score &gt; team_score ~ \"L\"\n)))\n\n#levels(bothsides$team_result)\n\nbothsides$team_result &lt;- relevel(bothsides$team_result, ref=\"W\")\n\n#levels(bothsides$team_result)\n\nmodelgames &lt;- bothsides |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season,\n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    team_season_freethrowpct,\n    opponent_season_freethrowpct,\n    team_season_total_rebounds,\n    opponent_season_total_rebounds,\n    team_season_fgpct,\n    opponent_season_fgpct,\n    team_season_3ptrs_attempted,\n    opponent_season_3ptrs_attempted,\n    team_season_rollmean_turnovers,\n    opponent_season_rollmean_turnovers,\n    team_turnovers_per_possession,\n    opponent_turnovers_per_possession,\n    team_result\n    ) |&gt; na.omit()\n\ngame_split &lt;- initial_split(modelgames, prop = .8)\ngame_train &lt;- training(game_split)\ngame_test &lt;- testing(game_split)\n\ngame_recipe &lt;- \n  recipe(team_result ~ ., data = game_train) |&gt; \n  update_role(game_id, game_date, team_short_display_name, opponent_team_short_display_name, season, new_role = \"ID\") |&gt;\n  step_normalize(all_predictors()) #removes size effects by using Z scores\n\n#summary(game_recipe)\n\nlog_mod &lt;- \n  logistic_reg() |&gt; \n  set_engine(\"glm\") |&gt;\n  set_mode(\"classification\")\n\nlightgbm_mod &lt;- \n  boost_tree() |&gt; \n  set_engine(\"lightgbm\") |&gt; \n  set_mode(mode = \"classification\")\n\nlog_workflow &lt;- \n  workflow() |&gt; \n  add_model(log_mod) |&gt; \n  add_recipe(game_recipe)\n\nlightgbm_workflow &lt;-\n  workflow() |&gt; \n  add_model(lightgbm_mod) |&gt; \n  add_recipe(game_recipe)\n\nlog_fit &lt;- \n  log_workflow |&gt; \n  fit(data = game_train)\n\nlightgbm_fit &lt;-\n  lightgbm_workflow |&gt; \n  fit(data = game_train)\n\nlogpredict &lt;- log_fit |&gt; predict(new_data = game_train) |&gt;\n  bind_cols(game_train)\n\nlogpredict &lt;- log_fit |&gt; predict(new_data = game_train, type=\"prob\") |&gt;\n  bind_cols(logpredict)\n\nlightgbmpredict &lt;- lightgbm_fit |&gt; predict(new_data = game_train) |&gt; \n  bind_cols(game_train)\n\nlightgbmpredict &lt;- lightgbm_fit |&gt; predict(new_data = game_train, type=\"prob\") |&gt; \n  bind_cols(lightgbmpredict)\n\n#head(logpredict)\n\n#metrics(logpredict, team_result, .pred_class)\n\n#metrics(lightgbmpredict, team_result, .pred_class)\n\nlogtestpredict &lt;- log_fit |&gt; predict(new_data = game_test) |&gt;\n  bind_cols(game_test)\n\nlogtestpredict &lt;- log_fit |&gt; predict(new_data = game_test, type=\"prob\") |&gt;\n  bind_cols(logtestpredict)\n\n#head(logtestpredict)\n\n#metrics(logtestpredict, team_result, .pred_class)\n\nlightgbmtestpredict &lt;- lightgbm_fit |&gt; predict(new_data = game_test) |&gt; \n  bind_cols(game_test)\n\nlightgbmtestpredict &lt;- lightgbm_fit |&gt; predict(new_data = game_test, type=\"prob\") |&gt; \n  bind_cols(lightgbmtestpredict)\n\n#metrics(lightgbmtestpredict, team_result, .pred_class)\n\nteamside &lt;- df |&gt; \n  group_by(team_id, season) |&gt; \n  arrange(game_date) |&gt; \n  mutate(\n    team_possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_season_offensive_efficiency = cummean(team_offensive_efficiency),\n    team_season_defensive_efficiency = cummean(team_defensive_efficiency),\n    team_season_freethrowpct = cummean(free_throw_pct),\n    team_season_total_rebounds = cummean(total_rebounds),\n    team_season_fgpct = cummean(field_goal_pct),\n    team_season_3ptrs_attempted = cummean(three_point_field_goals_attempted),\n    team_season_rollmean_turnovers = rollmean(turnovers, k=5, align = \"right\", fill=NA),\n    turnovers_per_possession = turnovers/team_possessions,\n    team_turnovers_per_possession = cummean(turnovers_per_possession),\n    score_margin = team_score - opponent_team_score,\n    absolute_score_margin = abs(score_margin)\n  ) |&gt; \n  filter(absolute_score_margin &lt;= 40) |&gt; \n  ungroup()\n\nopponentside &lt;- teamside |&gt; \n  select(-opponent_team_id) |&gt; \n  rename(\n    opponent_team_id = team_id,\n    opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    opponent_season_defensive_efficiency = team_season_defensive_efficiency,\n    opponent_season_freethrowpct = team_season_freethrowpct,\n    opponent_season_total_rebounds = team_season_total_rebounds,\n    opponent_season_fgpct = team_season_fgpct,\n    opponent_season_3ptrs_attempted = team_season_3ptrs_attempted,\n    opponent_season_rollmean_turnovers = team_season_rollmean_turnovers,\n    opponent_turnovers_per_possession = team_turnovers_per_possession\n  ) |&gt; \n  select(\n    game_id,\n    opponent_team_id,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    opponent_season_freethrowpct,\n    opponent_season_total_rebounds,\n    opponent_season_fgpct,\n    opponent_season_3ptrs_attempted,\n    opponent_season_rollmean_turnovers,\n    opponent_turnovers_per_possession\n  )\n\nbothsides &lt;- teamside |&gt; inner_join(opponentside)\n\n\nJoining with `by = join_by(game_id, opponent_team_id)`\n\n\nCode\nbothsides &lt;- bothsides |&gt; mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_team_score ~ \"W\",\n    opponent_team_score &gt; team_score ~ \"L\"\n)))\n\n#levels(bothsides$team_result)\n\nbothsides$team_result &lt;- relevel(bothsides$team_result, ref=\"W\")\n\n#levels(bothsides$team_result)\n\nmodelgames &lt;- bothsides |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season, \n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    team_season_freethrowpct,\n    opponent_season_freethrowpct,\n    team_season_total_rebounds,\n    opponent_season_total_rebounds,\n    team_season_fgpct,\n    opponent_season_fgpct,\n    team_season_3ptrs_attempted,\n    opponent_season_3ptrs_attempted,\n    team_season_rollmean_turnovers,\n    opponent_season_rollmean_turnovers,\n    team_turnovers_per_possession,\n    opponent_turnovers_per_possession,\n    team_result\n    ) |&gt; na.omit()\n\n\n\n## Play In Games ##\n\n\nplayingames &lt;- tibble(\n  team_short_display_name =\"Howard\",\n  opponent_team_short_display_name = \"Wagner\"\n) |&gt; add_row(\n  team_short_display_name = \"Boise St\",\n  opponent_team_short_display_name = \"Colorado\"\n) |&gt; add_row(\n  team_short_display_name = \"Montana St\",\n  opponent_team_short_display_name = \"Grambling\"\n) |&gt; add_row(\n  team_short_display_name = \"Colorado St\",\n  opponent_team_short_display_name = \"Virginia\"\n)\n\nplayingames &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(playingames)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nplayingames &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(playingames) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nplayin &lt;- log_fit |&gt; predict(new_data = playingames) |&gt;\n  bind_cols(playingames) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nplayin &lt;- log_fit |&gt; predict(new_data = playingames, type=\"prob\") |&gt;\n  bind_cols(playin) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#playin\n\n\n## East Bracket Games ##\n\n\neastround1games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Stetson\"\n) |&gt; add_row(\n  team_short_display_name=\"FAU\",\n  opponent_team_short_display_name=\"Northwestern\"\n) |&gt; add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_team_short_display_name=\"UAB\"\n) |&gt; add_row(\n  team_short_display_name=\"Auburn\",\n  opponent_team_short_display_name=\"Yale\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Duquesne\"\n) |&gt; add_row(\n  team_short_display_name=\"Illinois\",\n  opponent_team_short_display_name=\"Morehead St\"\n) |&gt; add_row(\n  team_short_display_name=\"Washington St\",\n  opponent_team_short_display_name=\"Drake\"\n) |&gt; add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_team_short_display_name=\"S Dakota St\"\n)\n\neastround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround1games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\neastround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround1games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\neastround1 &lt;- log_fit |&gt; predict(new_data = eastround1games) |&gt;\n  bind_cols(eastround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround1 &lt;- log_fit |&gt; predict(new_data = eastround1games, type=\"prob\") |&gt;\n  bind_cols(eastround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#eastround1\n\neastround2games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"FAU\"\n) |&gt; add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_team_short_display_name=\"Auburn\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Illinois\"\n) |&gt; add_row(\n  team_short_display_name=\"Drake\",\n  opponent_team_short_display_name=\"Iowa State\"\n)\n\neastround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround2games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\neastround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround2games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\neastround2 &lt;- log_fit |&gt; predict(new_data = eastround2games) |&gt;\n  bind_cols(eastround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround2 &lt;- log_fit |&gt; predict(new_data = eastround2games, type=\"prob\") |&gt;\n  bind_cols(eastround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#eastround2\n\neastround3games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Auburn\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Iowa State\"\n) \n\neastround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround3games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\neastround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround3games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\neastround3 &lt;- log_fit |&gt; predict(new_data = eastround3games) |&gt;\n  bind_cols(eastround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround3 &lt;- log_fit |&gt; predict(new_data = eastround3games, type=\"prob\") |&gt;\n  bind_cols(eastround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#eastround3\n\neastround4games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Iowa State\"\n)  \n\neastround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\neastround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround4games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\neastround4 &lt;- log_fit |&gt; predict(new_data = eastround4games) |&gt;\n  bind_cols(eastround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround4 &lt;- log_fit |&gt; predict(new_data = eastround4games, type=\"prob\") |&gt;\n  bind_cols(eastround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#eastround4\n\n\n## West Bracket Games ##\n\n\nwestround1games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Wagner\"\n) |&gt; add_row(\n  team_short_display_name=\"Mississippi St\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |&gt; add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_team_short_display_name=\"Grand Canyon\"\n) |&gt; add_row(\n  team_short_display_name=\"Alabama\",\n  opponent_team_short_display_name=\"Charleston\"\n) |&gt; add_row(\n  team_short_display_name=\"Clemson\",\n  opponent_team_short_display_name=\"New Mexico\"\n) |&gt; add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_team_short_display_name=\"Colgate\"\n) |&gt; add_row(\n  team_short_display_name=\"Dayton\",\n  opponent_team_short_display_name=\"Nevada\"\n) |&gt; add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_team_short_display_name=\"Long Beach St\"\n)\n\nwestround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround1games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nwestround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround1games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nwestround1 &lt;- log_fit |&gt; predict(new_data = westround1games) |&gt;\n  bind_cols(westround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround1 &lt;- log_fit |&gt; predict(new_data = westround1games, type=\"prob\") |&gt;\n  bind_cols(westround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#westround1\n\nwestround2games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |&gt; add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_team_short_display_name=\"Alabama\"\n) |&gt; add_row(\n  team_short_display_name=\"New Mexico\",\n  opponent_team_short_display_name=\"Baylor\"\n) |&gt; add_row(\n  team_short_display_name=\"Nevada\",\n  opponent_team_short_display_name=\"Arizona\"\n)\n\nwestround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround2games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nwestround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround2games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nwestround2 &lt;- log_fit |&gt; predict(new_data = westround2games) |&gt;\n  bind_cols(westround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround2 &lt;- log_fit |&gt; predict(new_data = westround2games, type=\"prob\") |&gt;\n  bind_cols(westround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#westround2\n\nwestround3games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Saint Mary's\"\n) |&gt; add_row(\n  team_short_display_name=\"New Mexico\",\n  opponent_team_short_display_name=\"Arizona\"\n) \n\nwestround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround3games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nwestround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround3games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nwestround3 &lt;- log_fit |&gt; predict(new_data = westround3games) |&gt;\n  bind_cols(westround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround3 &lt;- log_fit |&gt; predict(new_data = westround3games, type=\"prob\") |&gt;\n  bind_cols(westround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#westround3\n\nwestround4games &lt;- tibble(\n  team_short_display_name=\"Arizona\",\n  opponent_team_short_display_name=\"Saint Mary's\"\n) \n\nwestround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nwestround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround4games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nwestround4 &lt;- log_fit |&gt; predict(new_data = westround4games) |&gt;\n  bind_cols(westround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround4 &lt;- log_fit |&gt; predict(new_data = westround4games, type=\"prob\") |&gt;\n  bind_cols(westround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#westround4\n\n\n## South Bracket Games ##\n\n\nsouthround1games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Longwood\"\n) |&gt; add_row(\n  team_short_display_name=\"Nebraska\",\n  opponent_team_short_display_name=\"Texas A&M\"\n) |&gt; add_row(\n  team_short_display_name=\"Wisconsin\",\n  opponent_team_short_display_name=\"James Madison\"\n) |&gt; add_row(\n  team_short_display_name=\"Duke\",\n  opponent_team_short_display_name=\"Vermont\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas Tech\",\n  opponent_team_short_display_name=\"NC State\"\n) |&gt; add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_team_short_display_name=\"Oakland\"\n) |&gt; add_row(\n  team_short_display_name=\"Florida\",\n  opponent_team_short_display_name=\"Colorado\"\n) |&gt; add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_team_short_display_name=\"Western KY\"\n)\n\nsouthround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround1games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsouthround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround1games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nsouthround1 &lt;- log_fit |&gt; predict(new_data = southround1games) |&gt;\n  bind_cols(southround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround1 &lt;- log_fit |&gt; predict(new_data = southround1games, type=\"prob\") |&gt;\n  bind_cols(southround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#southround1\n\nsouthround2games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Nebraska\"\n) |&gt; add_row(\n  team_short_display_name=\"James Madison\",\n  opponent_team_short_display_name=\"Duke\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas Tech\",\n  opponent_team_short_display_name=\"Kentucky\"\n) |&gt; add_row(\n  team_short_display_name=\"Colorado\",\n  opponent_team_short_display_name=\"Marquette\"\n) \n\nsouthround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround2games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsouthround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround2games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nsouthround2 &lt;- log_fit |&gt; predict(new_data = southround2games) |&gt;\n  bind_cols(southround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround2 &lt;- log_fit |&gt; predict(new_data = southround2games, type=\"prob\") |&gt;\n  bind_cols(southround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#southround2\n\nsouthround3games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Duke\"\n) |&gt; add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_team_short_display_name=\"Marquette\"\n) \n\nsouthround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround3games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsouthround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround3games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nsouthround3 &lt;- log_fit |&gt; predict(new_data = southround3games) |&gt;\n  bind_cols(southround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround3 &lt;- log_fit |&gt; predict(new_data = southround3games, type=\"prob\") |&gt;\n  bind_cols(southround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#southround3\n\nsouthround4games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Kentucky\"\n) \n\nsouthround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsouthround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround4games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nsouthround4 &lt;- log_fit |&gt; predict(new_data = southround4games) |&gt;\n  bind_cols(southround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround4 &lt;- log_fit |&gt; predict(new_data = southround4games, type=\"prob\") |&gt;\n  bind_cols(southround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#southround4\n\n\n## Midwest Bracket Games ##\n\n\nmidwestround1games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Grambling\"\n) |&gt; add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_team_short_display_name=\"TCU\"\n) |&gt; add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_team_short_display_name=\"McNeese\"\n) |&gt; add_row(\n  team_short_display_name=\"Kansas\",\n  opponent_team_short_display_name=\"Samford\"\n) |&gt; add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Oregon\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Akron\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas\",\n  opponent_team_short_display_name=\"Colorado St\"\n) |&gt; add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_team_short_display_name=\"Saint Peter's\"\n)\n\nmidwestround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround1games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nmidwestround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround1games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nmidwestround1 &lt;- log_fit |&gt; predict(new_data = midwestround1games) |&gt;\n  bind_cols(midwestround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround1 &lt;- log_fit |&gt; predict(new_data = midwestround1games, type=\"prob\") |&gt;\n  bind_cols(midwestround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#midwestround1\n\nmidwestround2games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Utah State\"\n) |&gt; add_row(\n  team_short_display_name=\"McNeese\",\n  opponent_team_short_display_name=\"Samford\"\n) |&gt; add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Creighton\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas\",\n  opponent_team_short_display_name=\"Tennessee\"\n) \n\nmidwestround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround2games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nmidwestround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround2games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nmidwestround2 &lt;- log_fit |&gt; predict(new_data = midwestround2games) |&gt;\n  bind_cols(midwestround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround2 &lt;- log_fit |&gt; predict(new_data = midwestround2games, type=\"prob\") |&gt;\n  bind_cols(midwestround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#midwestround2\n\nmidwestround3games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"McNeese\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Tennessee\"\n)\n\nmidwestround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround3games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nmidwestround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround3games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nmidwestround3 &lt;- log_fit |&gt; predict(new_data = midwestround3games) |&gt;\n  bind_cols(midwestround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround3 &lt;- log_fit |&gt; predict(new_data = midwestround3games, type=\"prob\") |&gt;\n  bind_cols(midwestround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#midwestround3\n\nmidwestround4games &lt;- tibble(\n  team_short_display_name=\"McNeese\",\n  opponent_team_short_display_name=\"Tennessee\"\n) \n\nmidwestround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nmidwestround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround4games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nmidwestround4 &lt;- log_fit |&gt; predict(new_data = midwestround4games) |&gt;\n  bind_cols(midwestround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround4 &lt;- log_fit |&gt; predict(new_data = midwestround4games, type=\"prob\") |&gt;\n  bind_cols(midwestround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#midwestround4\n\n\n## FINAL FOUR GAMES ##\n\n\nfinal4games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Saint Mary's\"\n) |&gt; add_row(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"McNeese\"\n)\n\nfinal4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(final4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nfinal4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(final4games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nfinal4 &lt;- log_fit |&gt; predict(new_data = final4games) |&gt;\n  bind_cols(final4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nfinal4 &lt;- log_fit |&gt; predict(new_data = final4games, type=\"prob\") |&gt;\n  bind_cols(final4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#final4\n\n\n## CHAMPIONSHIP Game ##\n\n\nshipgames &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Houston\"\n) \n\nshipgames &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(shipgames)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nshipgames &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(shipgames) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nship &lt;- log_fit |&gt; predict(new_data = shipgames) |&gt;\n  bind_cols(shipgames) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nship &lt;- log_fit |&gt; predict(new_data = shipgames, type=\"prob\") |&gt;\n  bind_cols(ship) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#ship\n\n\n### SECOND CHANCE BRACKET ###\n\n# Sweet 16 Games ##\n\n\nsweet16games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"San Diego St\"\n) |&gt; add_row(\n  team_short_display_name=\"Illinois\",\n  opponent_team_short_display_name=\"Iowa State\"\n) |&gt; add_row(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Alabama\"\n) |&gt; add_row(\n  team_short_display_name=\"Clemson\",\n  opponent_team_short_display_name=\"Arizona\"\n) |&gt; add_row(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Duke\"\n) |&gt; add_row(\n  team_short_display_name=\"NC State\",\n  opponent_team_short_display_name=\"Marquette\"\n) |&gt; add_row(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Gonzaga\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Tennessee\"\n)\n\n\nsweet16games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(sweet16games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsweet16games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(sweet16games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nsweet16 &lt;- log_fit |&gt; predict(new_data = sweet16games) |&gt;\n  bind_cols(sweet16games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsweet16 &lt;- log_fit |&gt; predict(new_data = sweet16games, type=\"prob\") |&gt;\n  bind_cols(sweet16) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#sweet16\n\n\n## Elite 8 GAMES ##\n\n\nelite8games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Iowa State\"\n) |&gt; add_row(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Arizona\"\n) |&gt; add_row(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Marquette\"\n) |&gt; add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_team_short_display_name=\"Tennessee\"\n)\n\nelite8games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(elite8games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nelite8games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(elite8games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nelite8 &lt;- log_fit |&gt; predict(new_data = elite8games) |&gt;\n  bind_cols(elite8games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nelite8 &lt;- log_fit |&gt; predict(new_data = elite8games, type=\"prob\") |&gt;\n  bind_cols(elite8) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#elite8\n\n\n## New Final 4 Games ##\n\n\nnewfinal4games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Arizona\"\n) |&gt; add_row(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Gonzaga\"\n) \n\nnewfinal4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(newfinal4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nnewfinal4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(newfinal4games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nnewfinal4 &lt;- log_fit |&gt; predict(new_data = newfinal4games) |&gt;\n  bind_cols(newfinal4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nnewfinal4 &lt;- log_fit |&gt; predict(new_data = newfinal4games, type=\"prob\") |&gt;\n  bind_cols(newfinal4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#newfinal4\n\n\n## New Championship Game ##\n\n\nnewshipgames &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Houston\"\n)\n\nnewshipgames &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(newshipgames)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nnewshipgames &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(newshipgames) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nnewship &lt;- log_fit |&gt; predict(new_data = newshipgames) |&gt;\n  bind_cols(newshipgames) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nnewship &lt;- log_fit |&gt; predict(new_data = newshipgames, type=\"prob\") |&gt;\n  bind_cols(newship) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#newship\n\n\n#Model Decisions\nThe two predictors I lived and died by were offensive and defensive efficiency because those predictors alone resulted in a 67.8% test accuracy. When it came time to add more predictors, I overcame my PTSD and thought back to my post-basketball-game chats in high school, where I averaged 1.6 points per game my sophomore year according to MaxPreps (I was not good). I decided to add free throw percentage, rebounding, and turnovers among other variables.\n\n\nCode\ntable_recipe &lt;- summary(game_recipe)\ntable_recipe = table_recipe[,-2]\ntable_recipe = table_recipe[,-3]\ntable_recipe |&gt;  \n  gt() |&gt; \n  tab_source_note(source_note = md(\"**By:** Whitney Schwisow  |  **Source:** hoopR\")\n  )\n\n\n\n\n\n\n\n\n\nvariable\nrole\n\n\n\n\ngame_id\nID\n\n\ngame_date\nID\n\n\nteam_short_display_name\nID\n\n\nopponent_team_short_display_name\nID\n\n\nseason\nID\n\n\nteam_season_offensive_efficiency\npredictor\n\n\nteam_season_defensive_efficiency\npredictor\n\n\nopponent_season_offensive_efficiency\npredictor\n\n\nopponent_season_defensive_efficiency\npredictor\n\n\nteam_season_freethrowpct\npredictor\n\n\nopponent_season_freethrowpct\npredictor\n\n\nteam_season_total_rebounds\npredictor\n\n\nopponent_season_total_rebounds\npredictor\n\n\nteam_season_fgpct\npredictor\n\n\nopponent_season_fgpct\npredictor\n\n\nteam_season_3ptrs_attempted\npredictor\n\n\nopponent_season_3ptrs_attempted\npredictor\n\n\nteam_season_rollmean_turnovers\npredictor\n\n\nopponent_season_rollmean_turnovers\npredictor\n\n\nteam_turnovers_per_possession\npredictor\n\n\nopponent_turnovers_per_possession\npredictor\n\n\nteam_result\noutcome\n\n\n\nBy: Whitney Schwisow | Source: hoopR\n\n\n\n\n\n\n\n\n\nIn terms of selecting a model, I went with logistic regression because it is simple and it works well. I understand the math behind a logistic model (nerd), and it had a higher predictive power than random forest, lightGBM, and sports vector models. In testing, my logistic regression model was earning about a 68% accuracy level.\n\n\n\nEast Region Bracket Predictions\n\n\n#The Predictions\nAfter using my model to predict the NCAA tournament bracket, the East region performed the best points wise. I went 8-7, which is not great, but managed to earn 200 points due largely to sending UConn to the Final Four. This was my only correct Final Four pick. My model selected one upset in the first round of the east region, and it did not hit. I had BYU going to the Sweet 16, so them losing first round was a tough blow.\nThe greatest flaw my bracket endured was taking Saint Mary’s and McNeese to the Final Four. Saint Mary’s ended up losing in the first round as a 5 seed. McNeese got stomped by Gonzaga in the first round, sending the 12 seed home. I was initially proud that my Final Four wasn’t chalk, but these two teams did not play out well for me. Looking back, the variable I wish I had in my model to help this situation was strength of schedule. McNeese’s 30-4 record sounds impressive until you look closer and see that they played the College of Biblical Studies, Champion Christian, and the Mississippi University for Women.\nThe win I am most proud of in my bracket was selecting Tennessee over Creighton in the Sweet 16. I was tired of hearing about Baylor Scheierman, so I am thankful my model had Tennessee winning. I was also quite pleased that my model selected James Madison over Wisconsin.\nIf I was to do my model over again, I would change a couple things. First, I would add a strength of schedule variable, which I mentioned earlier. Second, I would have tried to use stepAIC to help me select my final variables. This function helps to choose the best model much quicker than me manually turning variables on and off. It takes into account multicollinearity, which I think probably would have been beneficial for my model. Here’s to improving my model for next year… and to never making random picks 10 minutes before the tournament ever again. And a final thank you to UConn for the 320 points.\n\n\n\nFull Bracket Selections"
  }
]