[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Latest Posts",
    "section": "",
    "text": "Using Linear Regression to Predict Rookie Wide Receiver Fantasy Points\n\n\n\n\n\n\nanalysis\n\n\nprediction\n\n\nwide receivers\n\n\nfootball\n\n\n\n\n\n\n\n\n\nMay 7, 2024\n\n\nWhitney Schwisow\n\n\n\n\n\n\n\n\n\n\n\n\nCan you use maching learning to win the NCAA Bracket Challenge 2024?\n\n\n\n\n\n\nncaa\n\n\nmachinelearning\n\n\nbasketball\n\n\n\n\n\n\n\n\n\nApr 15, 2024\n\n\nWhitney Schwisow\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nApr 4, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nApr 1, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/can-you-use-machine-learning-to-win-ncaa-bracket-challenge-2024/index.html",
    "href": "posts/can-you-use-machine-learning-to-win-ncaa-bracket-challenge-2024/index.html",
    "title": "Can you use maching learning to win the NCAA Bracket Challenge 2024?",
    "section": "",
    "text": "The March Madness tournament challenge looked different for me this year. Typically, I crank out a bracket approximately ten minutes before the first tournament game with my only knowledge of the college basketball season being the two Nebraska games I had watched over the course of the four month season. This year was not much different in terms of my NCAA basketball knowledge, but I had a new tool in my belt for making selections: a predictive model.\nAs I sit here today and reflect on my March Madness tournament bracket predictive model, I can’t help but think about how much I hate being average. Out of the 11 brackets, mine came in 4th place. I was in the 77th percentile, which felt okay until I realized that my model was six millionth place. What feels worse is that my personal bracket was in the 82nd percentile (reminder: I know nothing about NCAA basketball).\nMy one glimmer of hope is that my bracket beat Gunnar’s, hereby proving that I am the smartest actuarial science major in SPMC 460 (#CoJMCFamily).\nThe following is a look inside my thoughts as I built what I thought would be the winning model.\n\n\nCode\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(hoopR)\nlibrary(zoo)\nlibrary(bonsai)\nlibrary(gt)\nset.seed(1234)\n\ngames &lt;- load_mbb_team_box(seasons = 2015:2024) |&gt; filter(game_date &lt; as.Date(\"2024-03-18\"))\n\nnond1 &lt;- games |&gt; group_by(team_id, season) |&gt; tally() |&gt; filter(n &lt; 10 & season != 2021) |&gt; select(team_id)\nnond1 &lt;- pull(nond1)\n\ndf &lt;- games |&gt; filter(!team_id %in% nond1 & !opponent_team_id %in% nond1)\n\nteamside &lt;- df |&gt; \n  group_by(team_id, season) |&gt; \n  arrange(game_date) |&gt; \n  mutate(\n    team_possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_season_offensive_efficiency = lag(cummean(team_offensive_efficiency), n=1),\n    team_season_defensive_efficiency = lag(cummean(team_defensive_efficiency), n=1),\n    team_season_freethrowpct = lag(cummean(free_throw_pct), n=1),\n    team_season_total_rebounds = lag(cummean(total_rebounds), n=1),\n    team_season_fgpct = lag(cummean(field_goal_pct), n=1),\n    team_season_3ptrs_attempted = lag(cummean(three_point_field_goals_attempted), n=1),\n    team_season_rollmean_turnovers = rollmean(lag(turnovers, n=1), k=5, align = \"right\", fill=NA),\n    turnovers_per_possession = turnovers/team_possessions,\n    team_turnovers_per_possession = lag(cummean(turnovers_per_possession), n=1),\n    score_margin = team_score - opponent_team_score,\n    absolute_score_margin = abs(score_margin)\n  ) |&gt; \n  filter(absolute_score_margin &lt;= 40) |&gt; \n  ungroup()\n\nopponentside &lt;- teamside |&gt; \n  select(-opponent_team_id) |&gt; \n  rename(\n    opponent_team_id = team_id,\n    opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    opponent_season_defensive_efficiency = team_season_defensive_efficiency,\n    opponent_season_freethrowpct = team_season_freethrowpct,\n    opponent_season_total_rebounds = team_season_total_rebounds,\n    opponent_season_fgpct = team_season_fgpct,\n    opponent_season_3ptrs_attempted = team_season_3ptrs_attempted,\n    opponent_season_rollmean_turnovers = team_season_rollmean_turnovers,\n    opponent_turnovers_per_possession = team_turnovers_per_possession\n  ) |&gt; \n  select(\n    game_id,\n    opponent_team_id,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    opponent_season_freethrowpct,\n    opponent_season_total_rebounds,\n    opponent_season_fgpct,\n    opponent_season_3ptrs_attempted,\n    opponent_season_rollmean_turnovers,\n    opponent_turnovers_per_possession\n  )\n\nbothsides &lt;- teamside |&gt; inner_join(opponentside)\n\nbothsides &lt;- bothsides |&gt; mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_team_score ~ \"W\",\n    opponent_team_score &gt; team_score ~ \"L\"\n)))\n\n#levels(bothsides$team_result)\n\nbothsides$team_result &lt;- relevel(bothsides$team_result, ref=\"W\")\n\n#levels(bothsides$team_result)\n\nmodelgames &lt;- bothsides |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season,\n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    team_season_freethrowpct,\n    opponent_season_freethrowpct,\n    team_season_total_rebounds,\n    opponent_season_total_rebounds,\n    team_season_fgpct,\n    opponent_season_fgpct,\n    team_season_3ptrs_attempted,\n    opponent_season_3ptrs_attempted,\n    team_season_rollmean_turnovers,\n    opponent_season_rollmean_turnovers,\n    team_turnovers_per_possession,\n    opponent_turnovers_per_possession,\n    team_result\n    ) |&gt; na.omit()\n\ngame_split &lt;- initial_split(modelgames, prop = .8)\ngame_train &lt;- training(game_split)\ngame_test &lt;- testing(game_split)\n\ngame_recipe &lt;- \n  recipe(team_result ~ ., data = game_train) |&gt; \n  update_role(game_id, game_date, team_short_display_name, opponent_team_short_display_name, season, new_role = \"ID\") |&gt;\n  step_normalize(all_predictors()) #removes size effects by using Z scores\n\n#summary(game_recipe)\n\nlog_mod &lt;- \n  logistic_reg() |&gt; \n  set_engine(\"glm\") |&gt;\n  set_mode(\"classification\")\n\nlightgbm_mod &lt;- \n  boost_tree() |&gt; \n  set_engine(\"lightgbm\") |&gt; \n  set_mode(mode = \"classification\")\n\nlog_workflow &lt;- \n  workflow() |&gt; \n  add_model(log_mod) |&gt; \n  add_recipe(game_recipe)\n\nlightgbm_workflow &lt;-\n  workflow() |&gt; \n  add_model(lightgbm_mod) |&gt; \n  add_recipe(game_recipe)\n\nlog_fit &lt;- \n  log_workflow |&gt; \n  fit(data = game_train)\n\nlightgbm_fit &lt;-\n  lightgbm_workflow |&gt; \n  fit(data = game_train)\n\nlogpredict &lt;- log_fit |&gt; predict(new_data = game_train) |&gt;\n  bind_cols(game_train)\n\nlogpredict &lt;- log_fit |&gt; predict(new_data = game_train, type=\"prob\") |&gt;\n  bind_cols(logpredict)\n\nlightgbmpredict &lt;- lightgbm_fit |&gt; predict(new_data = game_train) |&gt; \n  bind_cols(game_train)\n\nlightgbmpredict &lt;- lightgbm_fit |&gt; predict(new_data = game_train, type=\"prob\") |&gt; \n  bind_cols(lightgbmpredict)\n\n#head(logpredict)\n\n#metrics(logpredict, team_result, .pred_class)\n\n#metrics(lightgbmpredict, team_result, .pred_class)\n\nlogtestpredict &lt;- log_fit |&gt; predict(new_data = game_test) |&gt;\n  bind_cols(game_test)\n\nlogtestpredict &lt;- log_fit |&gt; predict(new_data = game_test, type=\"prob\") |&gt;\n  bind_cols(logtestpredict)\n\n#head(logtestpredict)\n\n#metrics(logtestpredict, team_result, .pred_class)\n\nlightgbmtestpredict &lt;- lightgbm_fit |&gt; predict(new_data = game_test) |&gt; \n  bind_cols(game_test)\n\nlightgbmtestpredict &lt;- lightgbm_fit |&gt; predict(new_data = game_test, type=\"prob\") |&gt; \n  bind_cols(lightgbmtestpredict)\n\n#metrics(lightgbmtestpredict, team_result, .pred_class)\n\nteamside &lt;- df |&gt; \n  group_by(team_id, season) |&gt; \n  arrange(game_date) |&gt; \n  mutate(\n    team_possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_season_offensive_efficiency = cummean(team_offensive_efficiency),\n    team_season_defensive_efficiency = cummean(team_defensive_efficiency),\n    team_season_freethrowpct = cummean(free_throw_pct),\n    team_season_total_rebounds = cummean(total_rebounds),\n    team_season_fgpct = cummean(field_goal_pct),\n    team_season_3ptrs_attempted = cummean(three_point_field_goals_attempted),\n    team_season_rollmean_turnovers = rollmean(turnovers, k=5, align = \"right\", fill=NA),\n    turnovers_per_possession = turnovers/team_possessions,\n    team_turnovers_per_possession = cummean(turnovers_per_possession),\n    score_margin = team_score - opponent_team_score,\n    absolute_score_margin = abs(score_margin)\n  ) |&gt; \n  filter(absolute_score_margin &lt;= 40) |&gt; \n  ungroup()\n\nopponentside &lt;- teamside |&gt; \n  select(-opponent_team_id) |&gt; \n  rename(\n    opponent_team_id = team_id,\n    opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    opponent_season_defensive_efficiency = team_season_defensive_efficiency,\n    opponent_season_freethrowpct = team_season_freethrowpct,\n    opponent_season_total_rebounds = team_season_total_rebounds,\n    opponent_season_fgpct = team_season_fgpct,\n    opponent_season_3ptrs_attempted = team_season_3ptrs_attempted,\n    opponent_season_rollmean_turnovers = team_season_rollmean_turnovers,\n    opponent_turnovers_per_possession = team_turnovers_per_possession\n  ) |&gt; \n  select(\n    game_id,\n    opponent_team_id,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    opponent_season_freethrowpct,\n    opponent_season_total_rebounds,\n    opponent_season_fgpct,\n    opponent_season_3ptrs_attempted,\n    opponent_season_rollmean_turnovers,\n    opponent_turnovers_per_possession\n  )\n\nbothsides &lt;- teamside |&gt; inner_join(opponentside)\n\nbothsides &lt;- bothsides |&gt; mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_team_score ~ \"W\",\n    opponent_team_score &gt; team_score ~ \"L\"\n)))\n\n#levels(bothsides$team_result)\n\nbothsides$team_result &lt;- relevel(bothsides$team_result, ref=\"W\")\n\n#levels(bothsides$team_result)\n\nmodelgames &lt;- bothsides |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season, \n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    team_season_freethrowpct,\n    opponent_season_freethrowpct,\n    team_season_total_rebounds,\n    opponent_season_total_rebounds,\n    team_season_fgpct,\n    opponent_season_fgpct,\n    team_season_3ptrs_attempted,\n    opponent_season_3ptrs_attempted,\n    team_season_rollmean_turnovers,\n    opponent_season_rollmean_turnovers,\n    team_turnovers_per_possession,\n    opponent_turnovers_per_possession,\n    team_result\n    ) |&gt; na.omit()\n\n\n\n## Play In Games ##\n\n\nplayingames &lt;- tibble(\n  team_short_display_name =\"Howard\",\n  opponent_team_short_display_name = \"Wagner\"\n) |&gt; add_row(\n  team_short_display_name = \"Boise St\",\n  opponent_team_short_display_name = \"Colorado\"\n) |&gt; add_row(\n  team_short_display_name = \"Montana St\",\n  opponent_team_short_display_name = \"Grambling\"\n) |&gt; add_row(\n  team_short_display_name = \"Colorado St\",\n  opponent_team_short_display_name = \"Virginia\"\n)\n\nplayingames &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(playingames)\n\nplayingames &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(playingames) \n\nplayin &lt;- log_fit |&gt; predict(new_data = playingames) |&gt;\n  bind_cols(playingames) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nplayin &lt;- log_fit |&gt; predict(new_data = playingames, type=\"prob\") |&gt;\n  bind_cols(playin) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#playin\n\n\n## East Bracket Games ##\n\n\neastround1games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Stetson\"\n) |&gt; add_row(\n  team_short_display_name=\"FAU\",\n  opponent_team_short_display_name=\"Northwestern\"\n) |&gt; add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_team_short_display_name=\"UAB\"\n) |&gt; add_row(\n  team_short_display_name=\"Auburn\",\n  opponent_team_short_display_name=\"Yale\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Duquesne\"\n) |&gt; add_row(\n  team_short_display_name=\"Illinois\",\n  opponent_team_short_display_name=\"Morehead St\"\n) |&gt; add_row(\n  team_short_display_name=\"Washington St\",\n  opponent_team_short_display_name=\"Drake\"\n) |&gt; add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_team_short_display_name=\"S Dakota St\"\n)\n\neastround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround1games)\n\neastround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround1games) \n\neastround1 &lt;- log_fit |&gt; predict(new_data = eastround1games) |&gt;\n  bind_cols(eastround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround1 &lt;- log_fit |&gt; predict(new_data = eastround1games, type=\"prob\") |&gt;\n  bind_cols(eastround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#eastround1\n\neastround2games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"FAU\"\n) |&gt; add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_team_short_display_name=\"Auburn\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Illinois\"\n) |&gt; add_row(\n  team_short_display_name=\"Drake\",\n  opponent_team_short_display_name=\"Iowa State\"\n)\n\neastround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround2games)\n\neastround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround2games) \n\neastround2 &lt;- log_fit |&gt; predict(new_data = eastround2games) |&gt;\n  bind_cols(eastround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround2 &lt;- log_fit |&gt; predict(new_data = eastround2games, type=\"prob\") |&gt;\n  bind_cols(eastround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#eastround2\n\neastround3games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Auburn\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Iowa State\"\n) \n\neastround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround3games)\n\neastround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround3games) \n\neastround3 &lt;- log_fit |&gt; predict(new_data = eastround3games) |&gt;\n  bind_cols(eastround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround3 &lt;- log_fit |&gt; predict(new_data = eastround3games, type=\"prob\") |&gt;\n  bind_cols(eastround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#eastround3\n\neastround4games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Iowa State\"\n)  \n\neastround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround4games)\n\neastround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround4games) \n\neastround4 &lt;- log_fit |&gt; predict(new_data = eastround4games) |&gt;\n  bind_cols(eastround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround4 &lt;- log_fit |&gt; predict(new_data = eastround4games, type=\"prob\") |&gt;\n  bind_cols(eastround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#eastround4\n\n\n## West Bracket Games ##\n\n\nwestround1games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Wagner\"\n) |&gt; add_row(\n  team_short_display_name=\"Mississippi St\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |&gt; add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_team_short_display_name=\"Grand Canyon\"\n) |&gt; add_row(\n  team_short_display_name=\"Alabama\",\n  opponent_team_short_display_name=\"Charleston\"\n) |&gt; add_row(\n  team_short_display_name=\"Clemson\",\n  opponent_team_short_display_name=\"New Mexico\"\n) |&gt; add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_team_short_display_name=\"Colgate\"\n) |&gt; add_row(\n  team_short_display_name=\"Dayton\",\n  opponent_team_short_display_name=\"Nevada\"\n) |&gt; add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_team_short_display_name=\"Long Beach St\"\n)\n\nwestround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround1games)\n\nwestround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround1games) \n\nwestround1 &lt;- log_fit |&gt; predict(new_data = westround1games) |&gt;\n  bind_cols(westround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround1 &lt;- log_fit |&gt; predict(new_data = westround1games, type=\"prob\") |&gt;\n  bind_cols(westround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#westround1\n\nwestround2games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |&gt; add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_team_short_display_name=\"Alabama\"\n) |&gt; add_row(\n  team_short_display_name=\"New Mexico\",\n  opponent_team_short_display_name=\"Baylor\"\n) |&gt; add_row(\n  team_short_display_name=\"Nevada\",\n  opponent_team_short_display_name=\"Arizona\"\n)\n\nwestround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround2games)\n\nwestround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround2games) \n\nwestround2 &lt;- log_fit |&gt; predict(new_data = westround2games) |&gt;\n  bind_cols(westround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround2 &lt;- log_fit |&gt; predict(new_data = westround2games, type=\"prob\") |&gt;\n  bind_cols(westround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#westround2\n\nwestround3games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Saint Mary's\"\n) |&gt; add_row(\n  team_short_display_name=\"New Mexico\",\n  opponent_team_short_display_name=\"Arizona\"\n) \n\nwestround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround3games)\n\nwestround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround3games) \n\nwestround3 &lt;- log_fit |&gt; predict(new_data = westround3games) |&gt;\n  bind_cols(westround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround3 &lt;- log_fit |&gt; predict(new_data = westround3games, type=\"prob\") |&gt;\n  bind_cols(westround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#westround3\n\nwestround4games &lt;- tibble(\n  team_short_display_name=\"Arizona\",\n  opponent_team_short_display_name=\"Saint Mary's\"\n) \n\nwestround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround4games)\n\nwestround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround4games) \n\nwestround4 &lt;- log_fit |&gt; predict(new_data = westround4games) |&gt;\n  bind_cols(westround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround4 &lt;- log_fit |&gt; predict(new_data = westround4games, type=\"prob\") |&gt;\n  bind_cols(westround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#westround4\n\n\n## South Bracket Games ##\n\n\nsouthround1games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Longwood\"\n) |&gt; add_row(\n  team_short_display_name=\"Nebraska\",\n  opponent_team_short_display_name=\"Texas A&M\"\n) |&gt; add_row(\n  team_short_display_name=\"Wisconsin\",\n  opponent_team_short_display_name=\"James Madison\"\n) |&gt; add_row(\n  team_short_display_name=\"Duke\",\n  opponent_team_short_display_name=\"Vermont\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas Tech\",\n  opponent_team_short_display_name=\"NC State\"\n) |&gt; add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_team_short_display_name=\"Oakland\"\n) |&gt; add_row(\n  team_short_display_name=\"Florida\",\n  opponent_team_short_display_name=\"Colorado\"\n) |&gt; add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_team_short_display_name=\"Western KY\"\n)\n\nsouthround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround1games)\n\nsouthround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround1games) \n\nsouthround1 &lt;- log_fit |&gt; predict(new_data = southround1games) |&gt;\n  bind_cols(southround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround1 &lt;- log_fit |&gt; predict(new_data = southround1games, type=\"prob\") |&gt;\n  bind_cols(southround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#southround1\n\nsouthround2games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Nebraska\"\n) |&gt; add_row(\n  team_short_display_name=\"James Madison\",\n  opponent_team_short_display_name=\"Duke\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas Tech\",\n  opponent_team_short_display_name=\"Kentucky\"\n) |&gt; add_row(\n  team_short_display_name=\"Colorado\",\n  opponent_team_short_display_name=\"Marquette\"\n) \n\nsouthround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround2games)\n\nsouthround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround2games) \n\nsouthround2 &lt;- log_fit |&gt; predict(new_data = southround2games) |&gt;\n  bind_cols(southround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround2 &lt;- log_fit |&gt; predict(new_data = southround2games, type=\"prob\") |&gt;\n  bind_cols(southround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#southround2\n\nsouthround3games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Duke\"\n) |&gt; add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_team_short_display_name=\"Marquette\"\n) \n\nsouthround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround3games)\n\nsouthround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround3games) \n\nsouthround3 &lt;- log_fit |&gt; predict(new_data = southround3games) |&gt;\n  bind_cols(southround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround3 &lt;- log_fit |&gt; predict(new_data = southround3games, type=\"prob\") |&gt;\n  bind_cols(southround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#southround3\n\nsouthround4games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Kentucky\"\n) \n\nsouthround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround4games)\n\nsouthround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround4games) \n\nsouthround4 &lt;- log_fit |&gt; predict(new_data = southround4games) |&gt;\n  bind_cols(southround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround4 &lt;- log_fit |&gt; predict(new_data = southround4games, type=\"prob\") |&gt;\n  bind_cols(southround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#southround4\n\n\n## Midwest Bracket Games ##\n\n\nmidwestround1games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Grambling\"\n) |&gt; add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_team_short_display_name=\"TCU\"\n) |&gt; add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_team_short_display_name=\"McNeese\"\n) |&gt; add_row(\n  team_short_display_name=\"Kansas\",\n  opponent_team_short_display_name=\"Samford\"\n) |&gt; add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Oregon\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Akron\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas\",\n  opponent_team_short_display_name=\"Colorado St\"\n) |&gt; add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_team_short_display_name=\"Saint Peter's\"\n)\n\nmidwestround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround1games)\n\nmidwestround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround1games) \n\nmidwestround1 &lt;- log_fit |&gt; predict(new_data = midwestround1games) |&gt;\n  bind_cols(midwestround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround1 &lt;- log_fit |&gt; predict(new_data = midwestround1games, type=\"prob\") |&gt;\n  bind_cols(midwestround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#midwestround1\n\nmidwestround2games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Utah State\"\n) |&gt; add_row(\n  team_short_display_name=\"McNeese\",\n  opponent_team_short_display_name=\"Samford\"\n) |&gt; add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Creighton\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas\",\n  opponent_team_short_display_name=\"Tennessee\"\n) \n\nmidwestround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround2games)\n\nmidwestround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround2games) \n\nmidwestround2 &lt;- log_fit |&gt; predict(new_data = midwestround2games) |&gt;\n  bind_cols(midwestround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround2 &lt;- log_fit |&gt; predict(new_data = midwestround2games, type=\"prob\") |&gt;\n  bind_cols(midwestround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#midwestround2\n\nmidwestround3games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"McNeese\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Tennessee\"\n)\n\nmidwestround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround3games)\n\nmidwestround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround3games) \n\nmidwestround3 &lt;- log_fit |&gt; predict(new_data = midwestround3games) |&gt;\n  bind_cols(midwestround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround3 &lt;- log_fit |&gt; predict(new_data = midwestround3games, type=\"prob\") |&gt;\n  bind_cols(midwestround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#midwestround3\n\nmidwestround4games &lt;- tibble(\n  team_short_display_name=\"McNeese\",\n  opponent_team_short_display_name=\"Tennessee\"\n) \n\nmidwestround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround4games)\n\nmidwestround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround4games) \n\nmidwestround4 &lt;- log_fit |&gt; predict(new_data = midwestround4games) |&gt;\n  bind_cols(midwestround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround4 &lt;- log_fit |&gt; predict(new_data = midwestround4games, type=\"prob\") |&gt;\n  bind_cols(midwestround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#midwestround4\n\n\n## FINAL FOUR GAMES ##\n\n\nfinal4games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Saint Mary's\"\n) |&gt; add_row(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"McNeese\"\n)\n\nfinal4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(final4games)\n\nfinal4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(final4games) \n\nfinal4 &lt;- log_fit |&gt; predict(new_data = final4games) |&gt;\n  bind_cols(final4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nfinal4 &lt;- log_fit |&gt; predict(new_data = final4games, type=\"prob\") |&gt;\n  bind_cols(final4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#final4\n\n\n## CHAMPIONSHIP Game ##\n\n\nshipgames &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Houston\"\n) \n\nshipgames &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(shipgames)\n\nshipgames &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(shipgames) \n\nship &lt;- log_fit |&gt; predict(new_data = shipgames) |&gt;\n  bind_cols(shipgames) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nship &lt;- log_fit |&gt; predict(new_data = shipgames, type=\"prob\") |&gt;\n  bind_cols(ship) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#ship\n\n\n### SECOND CHANCE BRACKET ###\n\n# Sweet 16 Games ##\n\n\nsweet16games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"San Diego St\"\n) |&gt; add_row(\n  team_short_display_name=\"Illinois\",\n  opponent_team_short_display_name=\"Iowa State\"\n) |&gt; add_row(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Alabama\"\n) |&gt; add_row(\n  team_short_display_name=\"Clemson\",\n  opponent_team_short_display_name=\"Arizona\"\n) |&gt; add_row(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Duke\"\n) |&gt; add_row(\n  team_short_display_name=\"NC State\",\n  opponent_team_short_display_name=\"Marquette\"\n) |&gt; add_row(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Gonzaga\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Tennessee\"\n)\n\n\nsweet16games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(sweet16games)\n\nsweet16games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(sweet16games) \n\nsweet16 &lt;- log_fit |&gt; predict(new_data = sweet16games) |&gt;\n  bind_cols(sweet16games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsweet16 &lt;- log_fit |&gt; predict(new_data = sweet16games, type=\"prob\") |&gt;\n  bind_cols(sweet16) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#sweet16\n\n\n## Elite 8 GAMES ##\n\n\nelite8games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Iowa State\"\n) |&gt; add_row(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Arizona\"\n) |&gt; add_row(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Marquette\"\n) |&gt; add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_team_short_display_name=\"Tennessee\"\n)\n\nelite8games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(elite8games)\n\nelite8games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(elite8games) \n\nelite8 &lt;- log_fit |&gt; predict(new_data = elite8games) |&gt;\n  bind_cols(elite8games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nelite8 &lt;- log_fit |&gt; predict(new_data = elite8games, type=\"prob\") |&gt;\n  bind_cols(elite8) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#elite8\n\n\n## New Final 4 Games ##\n\n\nnewfinal4games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Arizona\"\n) |&gt; add_row(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Gonzaga\"\n) \n\nnewfinal4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(newfinal4games)\n\nnewfinal4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(newfinal4games) \n\nnewfinal4 &lt;- log_fit |&gt; predict(new_data = newfinal4games) |&gt;\n  bind_cols(newfinal4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nnewfinal4 &lt;- log_fit |&gt; predict(new_data = newfinal4games, type=\"prob\") |&gt;\n  bind_cols(newfinal4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#newfinal4\n\n\n## New Championship Game ##\n\n\nnewshipgames &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Houston\"\n)\n\nnewshipgames &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(newshipgames)\n\nnewshipgames &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(newshipgames) \n\nnewship &lt;- log_fit |&gt; predict(new_data = newshipgames) |&gt;\n  bind_cols(newshipgames) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nnewship &lt;- log_fit |&gt; predict(new_data = newshipgames, type=\"prob\") |&gt;\n  bind_cols(newship) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n#newship\n\n\n\nModel Decisions\nThe two predictors I lived and died by were offensive and defensive efficiency because those predictors alone resulted in a 67.8% test accuracy. When it came time to add more predictors, I overcame my PTSD and thought back to my post-basketball-game chats in high school, where I averaged 1.6 points per game my sophomore year according to MaxPreps (I was not good). I decided to add free throw percentage, rebounding, and turnovers among other variables.\n\n\nCode\ntable_recipe &lt;- summary(game_recipe)\ntable_recipe = table_recipe[,-2]\ntable_recipe = table_recipe[,-3]\ntable_recipe |&gt;  \n  gt() |&gt; \n  tab_source_note(source_note = md(\"**By:** Whitney Schwisow  |  **Source:** hoopR\")\n  )\n\n\n\n\n\n\n\n\n\nvariable\nrole\n\n\n\n\ngame_id\nID\n\n\ngame_date\nID\n\n\nteam_short_display_name\nID\n\n\nopponent_team_short_display_name\nID\n\n\nseason\nID\n\n\nteam_season_offensive_efficiency\npredictor\n\n\nteam_season_defensive_efficiency\npredictor\n\n\nopponent_season_offensive_efficiency\npredictor\n\n\nopponent_season_defensive_efficiency\npredictor\n\n\nteam_season_freethrowpct\npredictor\n\n\nopponent_season_freethrowpct\npredictor\n\n\nteam_season_total_rebounds\npredictor\n\n\nopponent_season_total_rebounds\npredictor\n\n\nteam_season_fgpct\npredictor\n\n\nopponent_season_fgpct\npredictor\n\n\nteam_season_3ptrs_attempted\npredictor\n\n\nopponent_season_3ptrs_attempted\npredictor\n\n\nteam_season_rollmean_turnovers\npredictor\n\n\nopponent_season_rollmean_turnovers\npredictor\n\n\nteam_turnovers_per_possession\npredictor\n\n\nopponent_turnovers_per_possession\npredictor\n\n\nteam_result\noutcome\n\n\n\nBy: Whitney Schwisow | Source: hoopR\n\n\n\n\n\n\n\n\n\nIn terms of selecting a model, I went with logistic regression because it is simple and it works well. I understand the math behind a logistic model (nerd), and it had a higher predictive power than random forest, lightGBM, and sports vector models. In testing, my logistic regression model was earning about a 68% accuracy level.\n\n\nThe Predictions\nAfter using my model to predict the NCAA tournament bracket, the East region performed the best points wise. I went 8-7, which is not great, but managed to earn 200 points due largely to sending UConn to the Final Four. This was my only correct Final Four pick. My model selected one upset in the first round of the east region, and it did not hit. I had BYU going to the Sweet 16, so them losing first round was a tough blow.\n\n\n\nEast Region Bracket Predictions\n\n\nThe greatest flaw my bracket endured was taking Saint Mary’s and McNeese to the Final Four. Saint Mary’s ended up losing in the first round as a 5 seed. McNeese got stomped by Gonzaga in the first round, sending the 12 seed home. I was initially proud that my Final Four wasn’t chalk, but these two teams did not play out well for me. Looking back, the variable I wish I had in my model to help this situation was strength of schedule. McNeese’s 30-4 record sounds impressive until you look closer and see that they played the College of Biblical Studies, Champion Christian, and the Mississippi University for Women.\nThe win I am most proud of in my bracket was selecting Tennessee over Creighton in the Sweet 16. I was tired of hearing about Baylor Scheierman, so I am thankful my model had Tennessee winning. I was also quite pleased that my model selected James Madison over Wisconsin.\nIf I was to do my model over again, I would change a couple things. First, I would add a strength of schedule variable, which I mentioned earlier. Second, I would have tried to use stepAIC to help me select my final variables. This function helps to choose the best model much quicker than me manually turning variables on and off. It takes into account multicollinearity, which I think probably would have been beneficial for my model. Here’s to improving my model for next year… and to never making random picks 10 minutes before the tournament ever again. And a final thank you to UConn for the 630 points.\n\n\n\nFull Bracket Selections"
  },
  {
    "objectID": "posts/predicting-rookie-wr-fantasy-points/index.html",
    "href": "posts/predicting-rookie-wr-fantasy-points/index.html",
    "title": "Using Linear Regression to Predict Rookie Wide Receiver Fantasy Points",
    "section": "",
    "text": "As someone who has never ever played fantasy football, I was stoked to predict which receivers would earn my pretend team points this upcoming season. Ultimately, my task was to make a top 10 list of rookie wide receivers based on who I predict will make the most fantasy points. First, I needed to identify which predictors or statistics I thought would help determine if a receiver will be good in the NFL. I am no expert on draft strategy or identifying NFL talent, so my first predictor let the experts do the work: overall draft pick position. If a player is drafted high up, obviously someone in the football realm thinks they have a good chance of being successful. For similar reasons, I used pre draft grade as a predictor. Next, I shifted to their college track record. Looking at the wide receiver statistics, I had five options for predictors: number of receptions, receiving yards, receiving touchdowns, yards per reception, and longest reception. To be honest, I tried all of them and chose the one with the highest accuracy, and that was receiving touchdowns. I did not use more than one because I did not want to cause multicollinearity issues in my model. Finally, I used the team who they were drafted to as a predictor by taking the average passing yards for each team over the last 3 seasons and the average passing touchdowns the last 2 years. The two rolling average windows I selected were the two that resulted in the highest prediction accuracy.\nWhile I feel confident in my predictors, predicting rookie wide receiver fantasy points is not that simple. There are other variables at play. Namely, teams that haven’t had a good passing offense the last few years could have drafted a quarterback early on in hopes to change this. On the flip side, teams who have impressive passing stats could have hired a new coach with a different offensive philosophy. Player health is also never guaranteed. I could spend hours considering other variables I should have considered in my model, but ultimately I decided that where they were drafted, who they were drafted by, fantasy predictions, and their college performance would give me a pretty solid starting point for who will be a good addition to my (hypothetical) fantasy team.\nSo who are the top 10?\nCode\nlibrary(tidyverse)\nlibrary(cfbfastR)\nlibrary(tidymodels)\nlibrary(zoo)\nlibrary(bonsai)\nlibrary(gt)\n\nset.seed(1234)\n\nwrpicks &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/wrpicks1423.csv\") |&gt; \n  mutate(college_year = year - 1)\n\nwrstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/receiving1323.csv\")\nwrusage &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/usage1323.csv\")\nwrfantasy &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/fantasystats1423.csv\") |&gt; \n  mutate(nfl_team = case_when(\n    tm == \"ARI\" ~ \"Arizona Cardinals\",\n    tm == \"ATL\" ~ \"Atlanta Falcons\",\n    tm == \"BAL\" ~ \"Baltimore Ravens\",\n    tm == \"BUF\" ~ \"Buffalo Bills\",\n    tm == \"CAR\" ~ \"Carolina Panthers\",\n    tm == \"CHI\" ~ \"Chicago Bears\",\n    tm == \"CIN\" ~ \"Cincinnati Bengals\",\n    tm == \"CLE\" ~ \"Cleveland Browns\",\n    tm == \"DAL\" ~ \"Dallas Cowboys\",\n    tm == \"DEN\" ~ \"Denver Broncos\",\n    tm == \"DET\" ~ \"Detroit Lions\",\n    tm == \"GNB\" ~ \"Green Bay Packers\",\n    tm == \"HOU\" ~ \"Houston Texans\",\n    tm == \"IND\" ~ \"Indianapolis Colts\",\n    tm == \"JAX\" ~ \"Jacksonville Jaguars\",\n    tm == \"KAN\" ~ \"Kansas City Chiefs\",\n    tm == \"LAC\" ~ \"Los Angeles Chargers\", \n    tm == \"LAR\" ~ \"Los Angeles Rams\", \n    tm == \"LVR\" ~ \"Las Vegas Raiders\",\n    tm == \"MIA\" ~ \"Miami Dolphins\",  \n    tm == \"MIN\" ~ \"Minnesota Vikings\",\n    tm == \"NOR\" ~ \"New Orleans Saints\",\n    tm == \"NWE\" ~ \"New England Patriots\",\n    tm == \"NYG\" ~ \"New York Giants\",\n    tm == \"NYJ\" ~ \"New York Jets\",\n    tm == \"OAK\" ~ \"Las Vegas Raiders\",\n    tm == \"PHI\" ~ \"Philadelphia Eagles\",\n    tm == \"PIT\" ~ \"Pittsburgh Steelers\",\n    tm == \"SDG\" ~ \"Los Angeles Chargers\",\n    tm == \"SEA\" ~ \"Seattle Seahawks\",\n    tm == \"SFO\" ~ \"San Francisco 49ers\",\n    tm == \"STL\" ~ \"Los Angeles Rams\",\n    tm == \"TAM\" ~ \"Tampa Bay Buccaneers\",\n    tm == \"TEN\" ~ \"Tennessee Titans\",\n    tm == \"WAS\" ~ \"Washington Commanders\",\n  ))\n\nnflstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/nfl_passing_offense0023.csv\") |&gt; filter(season &gt;= 2009) |&gt; \n  mutate(\n    nfl_team = case_when(\n      tm == \"Oakland Raiders\" ~ \"Las Vegas Raiders\",\n      tm == \"San Diego Chargers\" ~ \"Los Angeles Chargers\",\n      tm == \"St. Louis Rams\" ~ \"Los Angeles Rams\",\n      tm == \"Washington Football Team\" ~ \"Washington Commanders\",\n      tm == \"Washington Redskins\" ~ \"Washington Commanders\",\n      TRUE ~ tm\n      ))\n\nwrpicksselected &lt;- wrpicks |&gt; \n  select(\n    college_athlete_id,\n    nfl_athlete_id,\n    college_id,\n    name,\n    college_team, \n    college_conference,\n    nfl_team, \n    year,\n    college_year,\n    overall,\n    pre_draft_grade\n  )\n\nwrstatsselected &lt;- wrstats |&gt; \n  select(\n    athlete_id,\n    season,\n    receiving_td\n  )\n\nwrfantasyselected &lt;- wrfantasy |&gt; \n  filter(fant_pos == \"WR\") |&gt; \n  select(\n    season,\n    player, \n    nfl_team,\n    fant_pos,\n    fant_pt\n  )\n\nnflpassingselected &lt;- nflstats |&gt; \n  mutate(\n    rolling_mean_passing_yards = rollmean(yds, k=3, align = \"right\", fill=NA),\n    rolling_mean_passing_tds = rollmean(td, k=2, align = \"right\", fill=NA),\n  ) |&gt; \n  filter(season &gt;= 2014) |&gt; \n  select(\n    season,\n    nfl_team,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds\n  )\n  \nwrpicksstats &lt;- wrpicksselected |&gt; \n  inner_join(wrstatsselected, by=c(\"college_athlete_id\"=\"athlete_id\", \"college_year\" = \"season\"))\n\nwrpicksandfantasy &lt;- wrfantasyselected |&gt; \n  inner_join(wrpicksstats, by=c(\"player\" = \"name\", \"season\"=\"year\")) \n\nwrmodeling &lt;- wrpicksandfantasy |&gt;\n  left_join(nflpassingselected, by=c(\"season\"=\"season\", \"nfl_team.x\"=\"nfl_team\")) |&gt; \n  na.omit() |&gt; \n  select(-nfl_team.y)\n\n\nwrmodelingselected &lt;- wrmodeling |&gt; \n  select(\n    season,\n    player,\n    nfl_team.x,\n    overall,\n    pre_draft_grade,\n    receiving_td,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    fant_pt\n  ) |&gt; \n  rename(\n    nfl_team = nfl_team.x\n  )\n\nplayer_split &lt;- initial_split(wrmodelingselected, prop = .8)\n\nplayer_train &lt;- training(player_split)\nplayer_test &lt;- testing(player_split)\n\nplayer_recipe &lt;- \n  recipe(fant_pt ~ ., data = player_train) |&gt; \n  update_role(player, season, nfl_team, new_role = \"ID\")\n\nlinear_mod &lt;- \n  linear_reg() |&gt; \n  set_engine(\"lm\") |&gt;\n  set_mode(\"regression\")\n\nlinear_workflow &lt;- \n  workflow() |&gt; \n  add_model(linear_mod) |&gt; \n  add_recipe(player_recipe)\n\nlinear_fit &lt;- \n  linear_workflow |&gt; \n  fit(data = player_train)\n\n# Start the prediction for this season. The NFL team names are a mess because of choices made by the picks data provider. They just list them by city name, which creates problems in Los Angeles and New York. \n\nwrpicks &lt;- cfbd_draft_picks(year = 2024) |&gt; \n  filter(position == \"Wide Receiver\") |&gt; \n  mutate(college_year = year - 1) |&gt; \n  mutate(college_athlete_id = as.character(college_athlete_id)) |&gt; \n  mutate(nfl_team = case_when(\n    nfl_team == \"Arizona\" ~ \"Arizona Cardinals\",\n    nfl_team == \"Atlanta\" ~ \"Atlanta Falcons\",\n    nfl_team == \"Baltimore\" ~ \"Baltimore Ravens\",\n    nfl_team == \"Buffalo\" ~ \"Buffalo Bills\",\n    nfl_team == \"Carolina\" ~ \"Carolina Panthers\",\n    nfl_team == \"Chicago\" ~ \"Chicago Bears\",\n    nfl_team == \"Cincinnati\" ~ \"Cincinnati Bengals\",\n    nfl_team == \"Cleveland\" ~ \"Cleveland Browns\",\n    nfl_team == \"Dallas\" ~ \"Dallas Cowboys\",\n    nfl_team == \"Denver\" ~ \"Denver Broncos\",\n    nfl_team == \"Detroit\" ~ \"Detroit Lions\",\n    nfl_team == \"Green Bay\" ~ \"Green Bay Packers\",\n    nfl_team == \"Houston\" ~ \"Houston Texans\",\n    nfl_team == \"Indianapolis\" ~ \"Indianapolis Colts\",\n    nfl_team == \"Jacksonville\" ~ \"Jacksonville Jaguars\",\n    nfl_team == \"Kansas City\" ~ \"Kansas City Chiefs\",\n    name == \"Ladd McConkey\" ~ \"Los Angeles Chargers\", \n    name == \"Brenden Rice\" ~ \"Los Angeles Chargers\", \n    name == \"Cornelius Johnson\" ~ \"Los Angeles Chargers\",\n    name == \"Jordan Whittington\" ~ \"Los Angeles Rams\", \n    nfl_team == \"Las Vegas\" ~ \"Las Vegas Raiders\",\n    nfl_team == \"Miami\" ~ \"Miami Dolphins\",  \n    nfl_team == \"Minnesota\" ~ \"Minnesota Vikings\",\n    nfl_team == \"New Orleans\" ~ \"New Orleans Saints\",\n    nfl_team == \"New England\" ~ \"New England Patriots\",\n    name == \"Malik Nabers\" ~ \"New York Giants\",\n    nfl_team == \"New York\" ~ \"New York Jets\",\n    nfl_team == \"Philadelphia\" ~ \"Philadelphia Eagles\",\n    nfl_team == \"Pittsburgh\" ~ \"Pittsburgh Steelers\",\n    nfl_team == \"Seattle\" ~ \"Seattle Seahawks\",\n    nfl_team == \"San Francisco\" ~ \"San Francisco 49ers\",\n    nfl_team == \"St Louis\" ~ \"Los Angeles Rams\",\n    nfl_team == \"Tampa Bay\" ~ \"Tampa Bay Buccaneers\",\n    nfl_team == \"Tennessee\" ~ \"Tennessee Titans\",\n    nfl_team == \"Washington\" ~ \"Washington Commanders\",\n  ))\n\nwrstats &lt;- cfbd_stats_season_player(2023, category = \"receiving\") |&gt; \n  mutate(season = 2023)\n\nwrpicksselected &lt;- wrpicks |&gt; \n  select(\n    college_athlete_id,\n    nfl_athlete_id,\n    college_id,\n    name,\n    college_team, \n    college_conference,\n    nfl_team, \n    year,\n    college_year,\n    overall,\n    pre_draft_grade\n  )\n\nwrstatsselected &lt;- wrstats |&gt; \n  select(\n    athlete_id,\n    season,\n    receiving_td\n  )\n\nwrpicksstats &lt;- wrpicksselected |&gt; \n  inner_join(wrstatsselected, by=c(\"college_athlete_id\"=\"athlete_id\", \"college_year\" = \"season\"))\n\nwrmodeling &lt;- wrpicksstats |&gt;\n  left_join(nflpassingselected, by=c(\"college_year\"=\"season\", \"nfl_team\"=\"nfl_team\")) |&gt;\n  select(\n    year,\n    name,\n    nfl_team,\n    overall,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    receiving_td,\n    pre_draft_grade\n  ) |&gt; \n  rename(\n    player = name,\n    season = year\n  )\n\nlinearpredict &lt;- \n  linear_fit |&gt; \n  predict(new_data = wrmodeling) |&gt;\n  bind_cols(wrmodeling) \n\n# now that we have predictions, make the table\n\nlinearpredict |&gt; \n  select(player, nfl_team, overall, .pred) |&gt; \n  top_n(10, wt=.pred) |&gt; \n  arrange(desc(.pred)) |&gt; \n  gt() |&gt; \n  cols_label(\n    player = \"Player\",\n    nfl_team = \"Team\",\n    overall = \"Pick\",\n    .pred = \"Predicted Fantasy Points\"\n  )  |&gt;\n  tab_header(\n    title = \"Predicting the top fantasy rookie wide receivers\",\n    subtitle = \"Using draft grades, college receiving touchdowns, where they were drafted, and who they were drafted by, these receivers could be the most valuable rookie wide receiver for your fantasy team this season. Call the predicted points a safe bet -- an average outcome -- not a ceiling or a floor.\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Whitney Schwisow  |  **Source:** CFDB, Pro-Football Reference\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n\n\n\nPredicting the top fantasy rookie wide receivers\n\n\nUsing draft grades, college receiving touchdowns, where they were drafted, and who they were drafted by, these receivers could be the most valuable rookie wide receiver for your fantasy team this season. Call the predicted points a safe bet -- an average outcome -- not a ceiling or a floor.\n\n\nPlayer\nTeam\nPick\nPredicted Fantasy Points\n\n\n\n\nBrian Thomas Jr.\nJacksonville Jaguars\n23\n77.46868\n\n\nXavier Worthy\nKansas City Chiefs\n28\n77.28909\n\n\nMarvin Harrison Jr.\nArizona Cardinals\n4\n77.18821\n\n\nRicky Pearsall\nSan Francisco 49ers\n31\n76.30181\n\n\nMalik Nabers\nNew York Giants\n6\n75.05816\n\n\nRome Odunze\nChicago Bears\n9\n75.02556\n\n\nKeon Coleman\nBuffalo Bills\n33\n74.60728\n\n\nLadd McConkey\nLos Angeles Chargers\n34\n72.81224\n\n\nJa'Lynn Polk\nNew England Patriots\n37\n67.17044\n\n\nXavier Legette\nCarolina Panthers\n32\n66.37043\n\n\n\nBy: Whitney Schwisow | Source: CFDB, Pro-Football Reference"
  },
  {
    "objectID": "posts/predicting-rookie-wr-fantasy-points/index.html#brian-thomas-jr.-jacksonville-jaguars-drafted-23",
    "href": "posts/predicting-rookie-wr-fantasy-points/index.html#brian-thomas-jr.-jacksonville-jaguars-drafted-23",
    "title": "Using Linear Regression to Predict Rookie Wide Receiver Fantasy Points",
    "section": "1. Brian Thomas Jr., Jacksonville Jaguars, Drafted #23",
    "text": "1. Brian Thomas Jr., Jacksonville Jaguars, Drafted #23\nBrian Thomas Jr. was the top pick for my model. One of my model’s predictors was receiving touchdowns, and Thomas Jr. led the wide receivers in this model with 15 in the regular season. He was the 23rd overall draft pick. The Jaguars are among the top 5 teams in terms of rolling mean passing yards over the last 3 years, so he will be playing with a QB who is not afraid to throw the ball. He had a pre-draft grade of 90, which is in the top 4 out of the wide receiver draft class. While the only statistic he led was receiving touchdowns, Thomas Jr. is consistently in the top 5 among all of the predictors. This consistency helped him land the top spot for my model."
  },
  {
    "objectID": "posts/predicting-rookie-wr-fantasy-points/index.html#xavier-worthy-kansas-city-chiefs-drafted-28",
    "href": "posts/predicting-rookie-wr-fantasy-points/index.html#xavier-worthy-kansas-city-chiefs-drafted-28",
    "title": "Using Linear Regression to Predict Rookie Wide Receiver Fantasy Points",
    "section": "2. Xavier Worthy, Kansas City Chiefs, Drafted #28",
    "text": "2. Xavier Worthy, Kansas City Chiefs, Drafted #28\nXavier Worthy was the 28th overall pick, drafted to the Chiefs. Playing with a QB like Patrick Mahomes certainly influenced my model favoring him, as the Chiefs had the second highest rolling mean passing yards for all teams. The Chiefs were also second highest in rolling average passing touchdowns. Worthy had the 8th highest pre draft grade, so nothing spectacular individual stat wise. But, Xavier Worthy is incredibly fast, breaking the combine record for the 40-yard dash. His athleticism combined with the Chiefs offense could result in quality fantasy output."
  },
  {
    "objectID": "posts/predicting-rookie-wr-fantasy-points/index.html#marvin-harrison-jr.-arizona-cardinals-drafted-4",
    "href": "posts/predicting-rookie-wr-fantasy-points/index.html#marvin-harrison-jr.-arizona-cardinals-drafted-4",
    "title": "Using Linear Regression to Predict Rookie Wide Receiver Fantasy Points",
    "section": "3. Marvin Harrison Jr., Arizona Cardinals, Drafted #4",
    "text": "3. Marvin Harrison Jr., Arizona Cardinals, Drafted #4\nMarvin Harrison Jr. has impressive individual stats with 14 receiving touchdowns (second highest in my model) and a pre draft grade of 95 (highest). Unfortunately for him, the Cardinals have some of the lowest passing statistics over the past 2 years with Kyler Murray being injured."
  },
  {
    "objectID": "posts/predicting-rookie-wr-fantasy-points/index.html#ricky-pearsall-san-francisco-49ers-drafted-31",
    "href": "posts/predicting-rookie-wr-fantasy-points/index.html#ricky-pearsall-san-francisco-49ers-drafted-31",
    "title": "Using Linear Regression to Predict Rookie Wide Receiver Fantasy Points",
    "section": "4. Ricky Pearsall, San Francisco 49ers, Drafted #31",
    "text": "4. Ricky Pearsall, San Francisco 49ers, Drafted #31\nRicky Pearsall being drafted to the 49ers served him well in the eyes of my model. The 49ers took the top spot in terms of rolling mean passing yards and passing touchdowns. He is sitting at number 8 in terms of pre draft grade with 87. He has a unique recent history compared to my top 3, as he started playing at Arizona State and transferred to Florida, using all four years of eligibility. This experience could serve him well joining a good passing team."
  },
  {
    "objectID": "posts/predicting-rookie-wr-fantasy-points/index.html#malik-nabers-new-york-giants-drafted-6",
    "href": "posts/predicting-rookie-wr-fantasy-points/index.html#malik-nabers-new-york-giants-drafted-6",
    "title": "Using Linear Regression to Predict Rookie Wide Receiver Fantasy Points",
    "section": "5. Malik Nabers, New York Giants, Drafted #6",
    "text": "5. Malik Nabers, New York Giants, Drafted #6\nLooking at overall stats, Malik Nabers is top tier. He had a pre draft grade of 95, which is tied with Marvin Harrison Jr, who was the first wide receiver to get drafted this year. He had 14 receiving touchdowns, which is also tied with Harrison Jr. I’ve been looking at the NFL’s draft and combine profiles for each player up to this point, and Nabers has had the highest prospect grade - even above Harrison Jr. The one thing holding Nabers back in my model is that he was drafted to the Giants, who are the second worst team in terms of rolling mean passing yards and touchdowns."
  },
  {
    "objectID": "posts/predicting-rookie-wr-fantasy-points/index.html#rome-odunze-chicago-bears-drafted-9",
    "href": "posts/predicting-rookie-wr-fantasy-points/index.html#rome-odunze-chicago-bears-drafted-9",
    "title": "Using Linear Regression to Predict Rookie Wide Receiver Fantasy Points",
    "section": "6. Rome Odunze, Chicago Bears, Drafted #9",
    "text": "6. Rome Odunze, Chicago Bears, Drafted #9\nRome Odunze had 13 receiving touchdowns this season, which is fifth most in this data set. He also has the third highest pre draft grade out of the group. The Bears are in the bottom quarter of rolling mean passing yards and touchdowns. According to NFL prospects, Odunze is predicted to be a year one starter, and I think he will do well."
  },
  {
    "objectID": "posts/predicting-rookie-wr-fantasy-points/index.html#keon-coleman-buffalo-bills-drafted-33",
    "href": "posts/predicting-rookie-wr-fantasy-points/index.html#keon-coleman-buffalo-bills-drafted-33",
    "title": "Using Linear Regression to Predict Rookie Wide Receiver Fantasy Points",
    "section": "7. Keon Coleman, Buffalo Bills, Drafted #33",
    "text": "7. Keon Coleman, Buffalo Bills, Drafted #33\nKeon Coleman will benefit from having Josh Allen as quarterback, as the Bills are the third highest average passing yards and touchdowns. He had 11 receiving touchdowns last year, which is the 8th highest in the model. Since the Bills lost their best receiver recently, Coleman has an opportunity to step up."
  },
  {
    "objectID": "posts/predicting-rookie-wr-fantasy-points/index.html#ladd-mcconkey-los-angeles-chargers-drafted-34",
    "href": "posts/predicting-rookie-wr-fantasy-points/index.html#ladd-mcconkey-los-angeles-chargers-drafted-34",
    "title": "Using Linear Regression to Predict Rookie Wide Receiver Fantasy Points",
    "section": "8. Ladd McConkey, Los Angeles Chargers, Drafted #34",
    "text": "8. Ladd McConkey, Los Angeles Chargers, Drafted #34\nLadd McConkey was on the Georgia national champion team, so he has experience on a big stage, which could help him in the NFL. McConkey earned an 88 pre draft grade. He is going to the Chargers, who like the passing game, but Jim Harbaugh could change things for their offense. McConkey’s athleticism could give him a chance to score some fantasy points this year."
  },
  {
    "objectID": "posts/predicting-rookie-wr-fantasy-points/index.html#jalynn-polk-new-england-patriots-drafted-37",
    "href": "posts/predicting-rookie-wr-fantasy-points/index.html#jalynn-polk-new-england-patriots-drafted-37",
    "title": "Using Linear Regression to Predict Rookie Wide Receiver Fantasy Points",
    "section": "9. Ja’Lynn Polk, New England Patriots, Drafted #37",
    "text": "9. Ja’Lynn Polk, New England Patriots, Drafted #37\nJa’Lynn Polk is joining the Patriots, who are in the bottom 4 teams for passing statistics in my model. Fortunately for Polk, the Patriots drafted a quarterback their first pick, so he could turn things around for the passing offense. Polk had 8 receiving touchdowns, which was 14th best in my model."
  },
  {
    "objectID": "posts/predicting-rookie-wr-fantasy-points/index.html#xavier-legette-carolina-panthers-drafted-32",
    "href": "posts/predicting-rookie-wr-fantasy-points/index.html#xavier-legette-carolina-panthers-drafted-32",
    "title": "Using Linear Regression to Predict Rookie Wide Receiver Fantasy Points",
    "section": "10. Xavier Legette, Carolina Panthers, Drafted #32",
    "text": "10. Xavier Legette, Carolina Panthers, Drafted #32\nXavier Legette was drafted in the first round, which has not been the case for my 7-9 model picks. The Carolina Panthers have the lowest average passing yards over the last three seasons, which is what made my model push Legette down in the rankings. Legette earned an 89 pre draft grade, which was the fifth highest of the receivers in my model."
  }
]